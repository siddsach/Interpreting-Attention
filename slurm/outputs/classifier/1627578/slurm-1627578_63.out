ROOT_PATH: /home-nfs/siddsach/ml/Interpreting-Attention/interpreting_language
Building Bayesian Optimizer for 
 data:IMDB 
 choices:[{'domain': [5e-05, 0.005], 'type': 'continuous', 'name': 'lr'}, {'domain': [0, 1], 'type': 'continuous', 'name': 'rnn_dropout'}, {'domain': [0, 1], 'type': 'continuous', 'name': 'dropout'}, {'domain': [0, 1], 'type': 'continuous', 'name': 'l2'}]
SETTINGS FOR THIS RUN
{'batch_size': 32, 'rnn_dropout': 0.4917194715247587, 'dropout': 0.9500104929807545, 'lr': 0.0044599838610091674, 'attn_type': 'similarity', 'data': 'IMDB', 'tune_attn': False, 'num_layers': 1, 'l2': 0.9144947450944496, 'tune_wordvecs': False, 'wordvec_source': 'glove', 'wordvec_dim': 300}
Using CUDA!
here
similarity
Building RNN Classifier...

[93m    Warning: no model found for 'en'[0m

    Only loading the 'en' tokenizer.

Retrieving Data from file: /home-nfs/siddsach/ml/Interpreting-Attention/interpreting_language/data/imdb/aclImdb/train...
Got 25000 examples in 63.41145086288452 seconds
Retrieving Data from file: /home-nfs/siddsach/ml/Interpreting-Attention/interpreting_language/data/imdb/aclImdb/test...
Got 25000 examples in 61.628333568573 seconds
Loading Vectors From Memory...
Using these vectors: ['GloVe']
Getting GloVe Vectors with 300 dims
Building Vocab...
[<torchtext.vocab.Vectors object at 0x7f83b710bf98>]
Getting Batches...
Created Iterator with 782 batches
Getting Batches...
Created Iterator with 782 batches
Building model...
similarity
Using Attention model with following args:
{'batch_size': 32, 'rnn_dropout': 0.4917194715247587, 'attn_type': 'similarity', 'attention_dim': 350, 'hidden_size': 300, 'tune_attn': False, 'input_size': 300, 'dropout': 0.9500104929807545, 'vectors': 
 0.0000  0.0000  0.0000  ...   0.0000  0.0000  0.0000
 0.0000  0.0000  0.0000  ...   0.0000  0.0000  0.0000
 0.0000  0.0000  0.0000  ...   0.0000  0.0000  0.0000
          ...             â‹±             ...          
-0.0075  0.1840 -0.4634  ...   0.4392  0.2791  0.2908
 0.0000  0.0000  0.0000  ...   0.0000  0.0000  0.0000
 0.0000  0.0000  0.0000  ...   0.0000  0.0000  0.0000
[torch.FloatTensor of size 101925x300]
, 'num_layers': 1, 'vocab_size': 101925, 'num_classes': 2, 'cuda': True, 'train_word_vecs': False}
Not Tuning Word Vectors!
Begin Training...
Completing Train Step at 0th epoch...
Traceback (most recent call last):
  File "tune_models.py", line 186, in <module>
    batch_size = args.batch_size, seq_len = args.seq_len)
  File "tune_models.py", line 67, in __init__
    exact_feval = True
  File "/home-nfs/siddsach/anaconda3/lib/python3.5/site-packages/GPyOpt/methods/bayesian_optimization.py", line 117, in __init__
    self._init_design_chooser()
  File "/home-nfs/siddsach/anaconda3/lib/python3.5/site-packages/GPyOpt/methods/bayesian_optimization.py", line 192, in _init_design_chooser
    self.Y, _ = self.objective.evaluate(self.X)
  File "/home-nfs/siddsach/anaconda3/lib/python3.5/site-packages/GPyOpt/core/task/objective.py", line 50, in evaluate
    f_evals, cost_evals = self._eval_func(x)
  File "/home-nfs/siddsach/anaconda3/lib/python3.5/site-packages/GPyOpt/core/task/objective.py", line 74, in _eval_func
    rlt = self.func(np.atleast_2d(x[i]))
  File "tune_models.py", line 120, in getError
    trainer.train(optimizer)
  File "/home-nfs/siddsach/ml/Interpreting-Attention/interpreting_language/classifier/attention_rnn/trainer.py", line 613, in train
    optimizer = self.train_step(optimizer, start_time)
  File "/home-nfs/siddsach/ml/Interpreting-Attention/interpreting_language/classifier/attention_rnn/trainer.py", line 490, in train_step
    output, h, A = self.model(data, lengths = lengths)
  File "/home-nfs/siddsach/anaconda3/lib/python3.5/site-packages/torch/nn/modules/module.py", line 325, in __call__
    result = self.forward(*input, **kwargs)
  File "/home-nfs/siddsach/ml/Interpreting-Attention/interpreting_language/classifier/attention_rnn/model.py", line 219, in forward
    weighted_seq = torch.bmm(out, attn_params)
RuntimeError: Expected object of type Variable[torch.cuda.FloatTensor] but found type Variable[torch.FloatTensor] for argument #1 'mat2'
